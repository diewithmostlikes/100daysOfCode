package data_class

// we have as a programmers have noticed some class Purpose is to just hold some data
// Kotlin provides special class for just for holding data.And They are called data classes

// properties with val have only getter (get()) and not setter (set()) methods
// properties with var have both getter and setter { get() and set() }
data class Person(val name: String, val age: Int)

fun main() {
    // creating instances of Person Data Class
    val david = Person("David", 31)

    val  alex = Person("Alex", 21)
    println(alex) // has by default toString() method

    val john = Person("John", 19)
    val alexClone = Person("Alex", 21)
    val alexFakeClone = Person("Alex", 31)


    // implicitly generated equals() method


    // returns true if both properties are sane
    println(alexClone.equals(alex))  // Returns true because both properties are same
    println(alexFakeClone.equals(alex)) // Returns false because age properties are not equal

    // also have copy() method to generate new object with same or different values
    val johnTwo = john.copy() // new instance of Person data class with same values or date
    val modifiedDavid = david.copy("Dr.David", 34) // new instance with different or modified properties values
    // can use when we have to copy exact same data or want some properties value  modified in new created instance

    // decomposition
    val mitch = Person("Mitch", 28)
    val (name: String, age: Int) = mitch
    println("Hi, I'm $name and I'm $age years old.")

    //Note -: Number of variables must match the Number of properties
    // Variables are assigned in the order they are declared in the data class

    // decomposition is done by using componentN() methods generated by data class
    println("${david.component1()} and ${david.component1()}")

    // so for Decomposition we need componentN() methods

}